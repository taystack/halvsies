@mixin side( $FLOAT ) {
  position: relative;
  width: 50%;
  height: auto;
  float: $FLOAT;
}
@mixin no-side() {
  float: none;
  width: 100%;
}


// This simple mixin is given to a div to split it in half.
// When there isn't enough room to display side-by-side,
// then it reverts to above and below

// $WIDTH: The width of the div - %, px
// $MIN_WIDTH: Point at which the display is over-under
@mixin halvsies( $WIDTH, $MIN_WIDTH ) {
  display: inline-block;
  width: $WIDTH;
  height: auto;
  .left {
    @include side( left );
  }
  .right {
    @include side( right );
  }
  @media screen and ( max-width: $MIN_WIDTH ) {
    display: block;
    width: auto;
    .left {
      @include no-side();
    }
    .right {
      @include no-side();
    }
  }
}

// Create a div with class halvsies. Within halvsies, create two more divs
// with class left and class right, respectfully.

// # HTML

// <div class='halvsies'>
//   <div class='left'>
//   # left side content here
//   </div>
//   <div class='right'>
//   # right side content here
//   </div>
// </div>

// # SCSS

// $WIDTH: 100%;
// $MIN_WIDTH: 400px;

// .halvsies {
//   @include halvsies( $WIDTH, $MIN_WIDTH );
// }

// You can even nest halvsies inside other halvsies.
// For best results when nesting, in the stylesheet make sure to set the
// $MAX_WIDTH to 100% for all nested halvsies.

// # HTML

// <div class='halvsies'; id='one'>
//   <div class='left'>
//     <div class='halvsies'; id='two'
//       <div class='left'>
//       # nested left content here
//       </div>
//       <div class='right'>
//       # nested right content here
//       </div>
//   </div>
//   <div class='right'>
//   # right side content here
//   </div>
// </div>

// # SCSS

// #one {
//   .left {
//     background: green;
//   }
//   .right {
//     background: blue;
//   }
//   #two {
//     @include halvsies( $WIDTH, $MIN_WIDTH )
//     .left {
//       background: orange;
//     }
//     .right {
//       background: yellow;
//     }
//   }
// }